use arrayvec::ArrayVec;

const chip8_fontset: ArrayVec<u8, 80> = ArrayVec::from([
    0xF0, 0x90, 0x90, 0x90, 0xF0, //0
    0x20, 0x60, 0x20, 0x20, 0x70, //1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, //2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, //3
    0x90, 0x90, 0xF0, 0x10, 0x10, //4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, //5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, //6
    0xF0, 0x10, 0x20, 0x40, 0x40, //7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, //8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, //9
    0xF0, 0x90, 0xF0, 0x90, 0x90, //A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, //B
    0xF0, 0x80, 0x80, 0x80, 0xF0, //C
    0xE0, 0x90, 0x90, 0x90, 0xE0, //D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, //E
    0xF0, 0x80, 0xF0, 0x80, 0x80  //F
]);

pub struct Chip8 {
    opcode: u16,
    // limit is 4096
    memory: ArrayVec<u8, 4096>,
    V: Vec<u8>,
    I: u8,
    pc: u8,
    // limit is 2048
    gfx: ArrayVec<u8, 2048>,
    delay_timer: u8,
    sound_timer: u8,
    // limit is 16
    stack: ArrayVec<u8, 16>,
    sp: u8,
    // limit is 16
    key: ArrayVec<u8, 16>
}

impl Chip8 {
    pub fn init() -> Chip8 {
        let core = Chip8 {
            opcode: 0,
            pc: 0x200,
            memory: ArrayVec::from(vec![0; 4096])
        }
    }
}
